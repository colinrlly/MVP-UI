{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","subject","subject_dependent","handleChange","name","event","_this$setState","_this","setState","Object","defineProperty","target","value","test","preventDefault","data","FormData","date","get","field","trial","plot","entries","filter","x","map","input","_id","_rev","status","status_qualifier","participant","type","location","activity_type","start_date","timestamp","attribute","units","i","length","console","log","classes","this","props","react_default","a","createElement","className","layout","Paper_default","paper","index_es","variant","component","form","onSubmit","handleSubmit","FormControl_default","margin","fullWidth","TextField_default","label","defaultValue","required","Button_default","color","submit","Component","withStyles","theme","width","display","marginLeft","spacing","unit","marginRight","breakpoints","up","marginTop","flexDirection","alignItems","padding","concat","avatar","backgroundColor","palette","secondary","main","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b1c2fb1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Paper from '@material-ui/core/Paper';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n\nconst styles = theme => ({\n  layout: {\n    width: 'auto',\n    display: 'block', // Fix IE 11 issue.\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(400 + theme.spacing.unit * 3 * 2)]: {\n      width: 400,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    marginTop: theme.spacing.unit * 8,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 3}px ${theme.spacing.unit * 3}px`,\n  },\n  avatar: {\n    margin: theme.spacing.unit,\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing.unit,\n  },\n  submit: {\n    marginTop: theme.spacing.unit * 3,\n  },\n});\n\nclass App extends Component {\n  state = {\n    subject: '',\n    subject_dependent: '',\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n      subject_dependent: test,\n    });\n  };\n\n  handleSubmit(event) {\n    event.preventDefault();\n    \n    const data = new FormData(event.target);\n\n    const date = data.get('date');\n    const field = data.get('field');\n    const trial = data.get('trial');\n    const plot = data.get('plot');\n    const height = data.get('height');\n    const weight = data.get('weight');\n    const edible_mass = data.get('edible_mass');\n\n    let inputs = [\n      {\n        name: \"height\",\n        value: height\n      },\n      {\n        name: \"weight\",\n        value: weight\n      },\n      {\n        name: \"edible_mass\",\n        value: edible_mass\n      },\n    ];\n\n    let entries = inputs\n      .filter(x => x.value)\n      .map((input) => {\n        return {\n          \"_id\": \"something\",\n          \"_rev\": \"something\",\n          \"status\": {\n            \"status\": \"Complete\",\n            \"status_qualifier\": \"Success\"\n          },\n          \"participant\": {\n            \"type\": \"person\",\n            \"name\": \"TODO\"\n          },\n          \"field\": field,\n          \"location\": {\n            \"field\": field,\n            \"plot\": plot,\n            \"trial\": trial\n          },\n          \"activity_type\": \"Phenotype_Observation\",\n          \"start_date\": {\n            \"timestamp\": date\n          },\n          \"subject\": {\n            \"attribute\": {\n              \"units\": \"TODO\",\n              \"name\": input.name,\n              \"value\": input.value\n            },\n            \"name\": \"Plant\"\n          }\n        }\n    })\n\n    for (let i = 0; i < entries.length; i++) {\n      console.log(entries[i]);\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n        <main className={classes.layout}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h5\" component=\"h5\">\n              PhenoType Form\n            </Typography>\n            <form className={classes.form} onSubmit={this.handleSubmit}>\n              <FormControl margin=\"normal\" fullWidth>\n                <TextField\n                  label=\"Date\"\n                  type=\"datetime-local\"\n                  name=\"date\"\n                  defaultValue=\"2018-11-03T10:30\"\n                  required\n                />\n              </FormControl>\n              <FormControl margin=\"normal\" fullWidth>\n                <TextField\n                  label=\"Field\"\n                  name=\"field\"\n                  required\n                />\n              </FormControl>\n              <FormControl margin=\"normal\" fullWidth>\n                <TextField\n                  label=\"Trial\"\n                  name=\"trial\"\n                  required\n                />\n              </FormControl>\n              <FormControl margin=\"normal\" fullWidth>\n                <TextField\n                  label=\"Plot\"\n                  name=\"plot\"\n                  required\n                />\n              </FormControl>\n              <FormControl margin=\"normal\" fullWidth>\n                <TextField\n                  label=\"Height\"\n                  name=\"height\"\n                />\n              </FormControl>\n              <FormControl margin=\"normal\" fullWidth>\n                <TextField\n                  label=\"Weight\"\n                  name=\"weight\"\n                />\n              </FormControl>\n              <FormControl margin=\"normal\" fullWidth>\n                <TextField\n                  label=\"Edible Mass\"\n                  name=\"edible_mass\"\n                />\n              </FormControl>\n              {this.state.subject_dependent}\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n              >\n                Submit\n            </Button>\n            </form>\n          </Paper>\n        </main>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}